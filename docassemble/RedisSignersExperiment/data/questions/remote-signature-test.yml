---
# Make own function to make this more independent?
modules:
  - docassemble.VirtualCourtToolbox.shortenURL
---
include:
  - remote_sign_on_device.yml
---
objects:
  - redis: DARedis
---
mandatory: True
code: |
  multi_user = True
---
code: |
  if not defined('all_signers'):
    all_signers = users  # Assumes use of MAVirtualCourts

  # Have to abstract so devs can create/use their own docs and text effectively?
  # Create `action_data` elsewhere, as shown below
  action_data = custom_interview_redis_data
  
  parties = {}
  for signer in all_signers:
    parties[ signer.id ] = {
      "has_signed": False, "willing_to_sign": None, "name": str( signer )
    }
  action_data[ 'parties' ] = parties
  
  redis.set_data( action_key, action_data, expire=remote_siganure_expiration_ms )
  set_initial_redis_data = True
---
generic object: Individual
code: |
  if x.send_method == 'text': 
    x.message_result = send_sms(task='send sms_template', to=x.mobile_number, template=x.sms_template)
  else:
    x.message_result = send_email(to=x, template=x.email_template)
  x.was_notified = True
---
# Updates user doc with remote signatures
code: |
  new_data = redis.get_data( action_key )
  signing_parties = new_data[ 'parties' ]
  for signer in all_signers:
    if signer.id in signing_parties:
      # TODO: Test this thoroughly
      if signing_parties[ signer.id ][ 'has_signed' ]:
        signer.has_signed = signing_parties[ signer.id ][ 'has_signed' ]
        signer.signature = signing_parties[ signer.id ][ 'signature' ]

  get_stored_signatures = True
---
generic object: Individual
code: |
  # Can remove `x.` from this first var
  x.remote_signature_url = interview_url(
    action_key = action_key,
    party_id = x.id,
    new_session = '1',
    i=remote_signer_url_end  # The url the co-signer will go to
  )
---
# Makes sure `has_signed` is always at least defined
generic object: Individual
code: |
  x.has_signed = False
---
code: |
  action_key = get_random_chars()
---
generic object: Individual
code: |
  x.id = get_random_chars()
---
code: |
  import random
  import string
  def get_random_chars(num_chars=10):
    return ''.join(random.choice(string.ascii_lowercase) for i in range(10))
---
###################
#  Must be defined
##################
---
code: |
  custom_interview_redis_data = { 'user_names': str(users), 'signed_doc': signature_doc, }  #'no doc given' } # signature_doc, } #'preview': signature_doc }
---
code: |
  remote_siganure_expiration_ms = 1* 6 * 60 * 60 * 1000
---
code: |
  remote_signer_url_end = user_info().package + ':remote_signer_entrypoint.yml'
---
###################
#  Customizable?/Should be customized
##################
---
event: x.after_signature
generic object: Individual
code: |
  if device() and device().is_pc:
    notify_remote_signers
    after_remote_signers_notified
  else:
    if wants_to_finish_on_phone:
      notify_remote_signers
      after_remote_signers_notified
    else:
      phone_end
---
code: |
  for remote_signer in remote_signers:
    remote_signer.was_notified  # Send message
  notify_remote_signers = True
---
id: ask wants to finish on phone
question: |
  Do you want to finish on your phone?
yesno: wants_to_finish_on_phone
---
event: phone_end
question: |
  Thank you
subquestion: |
  You can finish on your original device.
---
id: how to send to remote signer
generic object: Individual
question: |
  Do you want to send this to ${ x } by email or text?
fields:
  - no label: x.send_method
    datatype: radio
    choices:
      - Email: email
      - Text: text
  - What is their email?: x.email
    js show if: |
      val("x.send_method") == "email"
  - What is their phone number?: x.mobile_number
    js show if: |
      val("x.send_method") == "text"
---
id: number to text
generic object: Individual
question: |
  What number should we text?
fields:
  - no label: x.mobile_number
---
id: sms template multiuser
generic object: Individual
template: x.sms_template
content: |
  Dear ${ x },
  ${ users[0] } is asking you to sign a document. Go to ${ x.signature_url } to sign the document.
---
generic object: Individual
code: |
  x.signature_url = shortenMe( x.remote_signature_url ).shortenedURL
---
id: email template multiuser
generic object: Individual
template: x.email_template
subject: Remote signature test
content: |
  Dear ${ x },
  ${ users[0] } is asking you to sign a document. Go to ${ x.signature_url } to sign the document.
---
generic object: Individual
template: x.sms_device_template
content:
  You have chosen to sign on this device, ${ x }. Sign your document at the link below

  ${ device_choice_url }
---
generic object: Individual
code: |
  long_device_choice_url = interview_url_action( 'trigger_sign_on_device', device_id='tbd', action_key=action_key, party_id=x.id )
  #parent_interview_data_id=parent_interview_data_id,
  device_choice_url = shortenMe( long_device_choice_url ).shortenedURL
---
event: trigger_sign_on_device
code: |
  users[0].sign_on_device
---
generic object: Individual
question: |
  ${ x.instanceName }  name
fields:
  - First: x.name.first
---
id: x.signature
generic object: Individual
question: |
  ${x}'s signature
signature: x.signature
---
event: after_remote_signers_notified
code: |
  users[0].status
---
id: document
event: x.status
# Problem - developer _needs_ to reconsider `get_stored_signatures`
reconsider:
  - get_stored_signatures
  - signature_doc
generic object: Individual
#prevent going back: True
question: |
  Test document signatures for ${ users[0] }
subquestion: |
  ${ signature_doc }
  
  ${ action_button_html('javascript:daShowSpinner();daRefreshSubmit()', label='Check again <i class="fas fa-sync-alt"></i>', size='lg') }
---
attachment:
  name: Signatures doc
  variable name: signature_doc
  filename: signatures
  docx template file: test-signatures.docx
  #persistent: True
  #private: False
---
objects:
  - users: DAList.using(object_type=Individual, auto_gather=False)
  - others: DAList.using(object_type=Individual, auto_gather=False)
---
mandatory: True
code: |
  log( user_info().package, 'console' )
  # Save data to redis
  # action_key (unique to this legal action), user_name, party_id
  # Send link generated by something. The remote interview entrypoint?
  # Start the remote entrypoint. Has a mandatory block.
  # Remote entrypoint uses remote_sign_on_device.yml to get signature. Can customize questions and data.
  # redist.set_data( 'action_key', { parties: {}, preview: doc, }, expire=3)
  # url_args needed: action_key, party_id, user_id

  users[0].name.first
  users.gathered = True
  local_signers = users

  others[0].name.first
  others[1].name.first
  others.gathered = True
  others.there_is_another = False
  remote_signers = [ others[0], others[1] ]

  all_signers = users + others
  all_signers.gathered = True
  all_signers.there_is_another = False

  ## TODO: Discuss - This sort of looks like there's only one user per interview, so maybe we don't need a list of users.

  # https://docassemble.org/docs/objects.html#DAFile.set_attributes
  # Do we want persistance so that signers can see their document even after the user has exited the interview?
  # Developer: Do this before setting redis data
  signature_doc.set_attributes(persistent=True, private=False)

  action_key # var name? legal_action? with same people. one form...
  set_initial_redis_data
  
  users[0].sign_on_device
