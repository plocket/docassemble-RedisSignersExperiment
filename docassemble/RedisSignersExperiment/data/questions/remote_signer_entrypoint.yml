modules:
  - docassemble.VirtualCourtToolbox.shortenURL
---
include:
  - remote_sign_on_device.yml
  #- docassemble.MAVirtualCourt:basic-questions.yml
---
modules:
  - .signing_party
---
objects:
  - redis: DARedis
  - signer: Individual
---
# Currently getting here with the url in the console of the initial interview
mandatory: True
code: |
  if 'action_key' in url_args:
    party = get_signer( url_args )
    if party:
      signer.name.first = party[ 'name' ]
      signer.has_signed = party[ 'has_signed' ]
      was_willing = party[ 'willing_to_sign' ]
      user_name = redis.get_data( url_args['action_key'] )['parties'][ url_args[ 'user_id' ]][ 'name' ]
      
      # TODO: should this ask them about being willing to sign every time?
      if was_willing is True or signer.willing_to_sign:
        amend_signer( url_args, 'willing_to_sign', True )
        signer.sign_on_device
      else:
        amend_signer( url_args, 'willing_to_sign', False )
        signer.end_with_unwilling_to_sign

  # TODO: If we don't do this, unauthorized users don't get a message? If we do this, though, other scripts can't get the url from here.
  #elif not defined('users[0]'):
  #  unauthorized
---
#code: |
#    original_instance_name = signer.instanceName
---
id: x.after_signature
event: x.after_signature
generic object: Individual
code: |
  amend_signer( url_args, 'signature', x.signature )
  amend_signer( url_args, 'signature_date', today()  )
  amend_signer( url_args, 'has_signed', True )

  x.after_signature_saved
---
id: x.after_signature_saved
event: x.after_signature_saved
generic object: Individual
code: |
  x.status
---
# Doc is `None` when we try to use signatures
id: signature status
event: x.status
generic object: Individual
prevent going back: True
question: |
  Signature status for ${ x }
subquestion: |
  ${ user_name }'s document.
  
  ${ redis.get_data( url_args['action_key'] )[ 'signed_doc' ] }
---
id: signature
generic object: Individual
question: |
  Signature ${ x }
signature: x.signature
---
generic object: Individual
code: |
  x.signature_url_string = interview_url(
    action_key = action_key,
    user_id = users[0].id,
    party_id = x.id,
    new_session = '1', i='docassemble.playground12MultiSignatureRedis:remote_signer_entrypoint.yml'
  )
---
id: x.end_with_unwilling_to_sign
event: x.end_with_unwilling_to_sign
generic object: Individual
code: |
  amend_signer( url_args, 'willing_to_sign', False )
  x.unwilling_screen
---
id: unwilling to sign end
event: x.unwilling_screen
question: |
  Thank you and goodbye
buttons:
  - exit
---
id: unauthorized
event: unauthorized
question: |
  Thank you and goodbye
buttons:
  - exit
---
id: x.willing_to_sign
generic object: Individual
question: |
  Are you willing to sign this document?
yesno: x.willing_to_sign
