modules:
  - docassemble.VirtualCourtToolbox.shortenURL
---
include:
  - remote_sign_on_device.yml
  #- docassemble.MAVirtualCourt:basic-questions.yml
---
# Use redis data to create values for local objects so that intrinsic names (`.instanceName`) can be used for `generic object:` in this interview.
objects:
  - redis: DARedis
  - user: Individual
  - signer: Individual
---
# Currently getting here with the url in the console of the initial interview
mandatory: True
code: |
  if 'action_key' in url_args:
    test_key = url_args[ 'test_key' ]
    #redis_data = redis.get_data( url_args['action_key'] )
    #signer_data = redis_data['parties'][ url_args['party_id'] ]
    #signer.signature
    #signer_data.signature = signer.signature
    
    log( 'action_key: ' + url_args['action_key'], 'console' )
    #log( redis.get_data( url_args['action_key'] ), 'console' )
    redis_data = redis.get_data( url_args['action_key'] )
    
    signer_data = redis_data['parties'][ url_args['party_id'] ]
    #log( signer_data.name, 'console' )
    #log( signer.name.first, 'console' )
    signer.name = signer_data.name
    signer.id = signer_data.id
    user_data = redis_data['parties'][ url_args['user_id'] ]
    user = user_data.name
    #preview = redis_data[ 'preview' ]
    #get_preview
    #log( user_data.id, 'console' )
    log( 'signer id: ' + signer_data.id, 'console' )

    signer.signature.set_attributes(persistent=True, private=False)
    #signer_data.signature = signer.signature
    log( 'signer.signature:', 'console' )
    log( signer.signature, 'console' )

    
    #signatures = redis_data[ 'signatures' ]
    #signatures[ signer.id ] = signer.signature
    #redis_data[ 'signatures' ][ signer.id ] = signer.signature
    redis_data['parties'][ url_args['party_id'] ].signature = signer.signature
    log( 'signer id:', 'console' )
    log( signer.id, 'console' )
    #log( 'redis_data signature:', 'console' )
    #log( redis_data[ 'signatures' ][ signer.id ], 'console' )
    
    #redis.set_data( test_key, signer.signature , expire=(12 * 60 * 60 * 1000) )
    #log( test_key, 'console' )
    #log( redis.get_data( test_key ), 'console' )
    #log( redis_data['parties'][ url_args['party_id'] ].signature, 'console' )
    
    redis.set_data( url_args['action_key'], redis_data )
    #log( 'redis.get_data signature:', 'console' )
    #log( redis.get_data( url_args['action_key'] )['signatures'][ signer.id ], 'console' )
    #
    #log( url_args['action_key'], 'console' )
    
    signer.status
---
id: signature status
event: x.status
generic object: Individual
prevent going back: True
question: |
  Signature status for ${ x }
subquestion: |
  ${ user }'s document.
  
  ${ redis.get_data( url_args['action_key'] )[ 'signed_doc' ] }
#  ${ repr(redis.get_data( url_args['action_key'] )) }
#  [ 'signed_doc' ] }
---
id: signature
generic object: Individual
question: |
  Signature ${ x }
signature: x.signature
---
generic object: Individual
code: |
  x.signature_url_string = interview_url(
    action_key = action_key,
    user_id = users[0].id,
    party_id = x.id,
    test_key = test_key,
    new_session = '1', i='docassemble.playground12MultiSignatureRedis:remote_signer_entrypoint.yml'
  )
---