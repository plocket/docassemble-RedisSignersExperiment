modules:
  - .signing_party
---
include:
  - remote_sign_on_device.yml
---
objects:
  - redis: DARedis
  - signer: Individual
  - signer.devices: DAList.using(object_type=DAObject, auto_gather=False, gathered=True, there_is_another=False)
---
# Currently getting here with the url in the console of the initial interview
mandatory: True
code: |
  #log( 0 )
  #log( action_arguments() )
  #if foo == 1:
  #  foo += 1
  #  log(device_choice_url, 'console')
  #  log(short_device_choice_url, 'console')
  get_remote_signature
---
#code: |
#  foo = 1
#---
#objects:
#  - devices: DAList.using(object_type=DAObject, auto_gather=False, gathered=True, there_is_another=False)
---
event: get_remote_signature
code: |
  #devices[0] = devices.appendObject()
  log( 0.5 )
  data = None
  if 'action_key' in url_args:
    log( 1 )
    log( url_args )
    data = url_args
  elif action_argument() and action_argument('action_key'):
    log( 2 )
    data = {
      #'parent_interview_data_id': action_argument('parent_interview_data_id'),
      'action_key': action_argument('action_key'),
      'party_id': action_argument('party_id')
    }

  log( 3 )
  log( action_arguments() )
  log( action_argument('action_key') )
  #log(device_choice_url, 'console')
  #if foo > 1:
  #  get_remote_signature = True
  #foo += 1
  if data:
    log( 4 )
    #parent_interview_data_id = data['parent_interview_data_id']
    action_key = data['action_key']
    log( 5 )
    party = get_signer( data )
    log( 6 )
    if party:
      log( 7 )
      signer.id = data['party_id']
      signer.name.first = party[ 'name' ]
      signer.has_signed = party[ 'has_signed' ]
      was_willing = party[ 'willing_to_sign' ]
      log( 8 )

      # Skip question if they've already signed or were already willing to sign.
      # Should `.has_signed` be handled here or passed on to `.sign_on_device` which already has to be set up to handle it?
      if signer.has_signed or was_willing is True or signer.willing_to_sign:
        log( 9 )
        amend_signer( url_args, 'willing_to_sign', True )
        signer.sign_on_device
      else:
        log( 10 )
        amend_signer( url_args, 'willing_to_sign', False )
        signer.after_unwilling_to_sign

  ## Untested
  #else:
  #  unauthorized
  
  get_remote_signature = True
---
###################
#  Must be defined
##################
---
id: x.after_signature
event: x.after_signature
generic object: Individual
code: |
  if not x.has_signed:
    amend_signer( url_args, 'signature', x.signature )
    amend_signer( url_args, 'signature_date', today()  )
    amend_signer( url_args, 'has_signed', True )

  x.after_signature_saved
---
id: x.after_unwilling_to_sign
event: x.after_unwilling_to_sign
generic object: Individual
code: |
  amend_signer( url_args, 'willing_to_sign', False )
  x.after_unwilling_to_sign_saved
---
generic object: Individual
template: x.sms_device_template
content:
  You have chosen to sign on this device, ${ x }. [Sign your document](${ device_choice_url }). ${ device_choice_url }
---
event: test
code: |
  log( 'bleh', 'console' )
  log( action_arguments(), 'console' )
  log( 'bleh' )
  log( action_arguments() )
---
#generic object: DAObject
#code: |
#  #device_choice_url = interview_url_action( 'get_remote_signature', device_id='tbd', action_key=action_key, party_id=x.id )
#  #device_choice_url = interview_url_action( 'get_remote_signature', device_id='tbd', action_key=action_key, party_id=signer.id )
#  #parent_interview_data_id=parent_interview_data_id,
---
code: |
  device_choice_url = interview_url_action( 'test', device_id='tbd', action_key=action_key, party_id=signer.id )
  log(device_choice_url, 'console')
  #parent_interview_data_id=parent_interview_data_id,
  short_device_choice_url = shortenMe( device_choice_url ).shortenedURL
  #log(short_device_choice_url, 'console')
---
modules:
  - docassemble.VirtualCourtToolbox.shortenURL
---
###################
#  Customizable?/Should be customized
##################
---
id: x.after_signature_saved
event: x.after_signature_saved
generic object: Individual
code: |
  x.status
---
# Doc is `None` when we try to use signatures
id: signature status
event: x.status
generic object: Individual
prevent going back: True
question: |
  Signature status for ${ x }
subquestion: |
  ${ redis.get_data( url_args['action_key'] )['user_names'] }'s document.
  
  ${ redis.get_data( url_args['action_key'] )[ 'signed_doc' ] }
---
id: signature
generic object: Individual
question: |
  Signature ${ x }
signature: x.signature
---
id: unwilling to sign end
generic object: Individual
event: x.after_unwilling_to_sign_saved
question: |
  Thank you and goodbye
buttons:
  - Exit: exit
---
id: unauthorized
event: unauthorized
question: |
  Thank you and goodbye
buttons:
  - Exit: exit
---
id: x.willing_to_sign
generic object: Individual
question: |
  Are you willing to sign this document?
yesno: x.willing_to_sign
